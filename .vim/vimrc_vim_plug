""""""""""""""""""""
" vim-plug
""""""""""""""""""""
" see: https://github.com/junegunn/vim-plug
call plug#begin()

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'vim-airline/vim-airline'
"Plug 'vim-airline/vim-airline-themes'
Plug 'powerline/fonts'
Plug 'jiangmiao/auto-pairs'
Plug 'andymass/vim-matchup'
Plug 'preservim/nerdcommenter'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'majutsushi/tagbar'
Plug 'ludovicchabant/vim-gutentags'
Plug 'noahfrederick/vim-skeleton'
Plug 'mileszs/ack.vim'
Plug 'romainl/vim-qf'
"Plug 'vim-syntastic/syntastic'
Plug 'ycm-core/YouCompleteMe'
"Plug 'kkoomen/vim-doge'
" tpope/vim-unimpaired
" schemes
"Plug 'vimscript/molokai'
"Plug 'rakr/vim-one'
"Plug 'lifepillar/vim-solarized8'
Plug 'morhetz/gruvbox'

" Initialize plugin system
call plug#end()


""""""""""""""""""""
" colorscheme
""""""""""""""""""""
" background=default|light|dark|palenight
set background=dark

" molokai
"colorscheme molokai

" vim-one -- a purple theme
"colorscheme one
"let g:one_allow_italics = 1

" vim-solarized8 -- solarized + true-color support
"colorscheme solarized8

" gruvbox -- yellow
colorscheme gruvbox
""""""""""""""""""""
" nerdtree
""""""""""""""""""""
" https://github.com/preservim/nerdtree
" toggle nerdtree
nnoremap    <F5>    :NERDTreeToggle<cr>
" close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" open NERDTree automatically when vim starts up on opening a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

""""""""""""""""""""
" airline
""""""""""""""""""""
let g:airline#extensions#tabline#enabled = 1
" theme setting
"let g:airline_theme="hybridline"
" fonts setting
"" Install font: https://github.com/powerline/fonts, clone it and run ./install.sh
let g:airline_powerline_fonts = 1 "if you use font   

""""""""""""""""""""
" auto-pair
""""""""""""""""""""
" https://github.com/jiangmiao/auto-pairs
let g:AutoPairsFlyMode = 1  " e.g.: press } to fly to the next }
"let g:AutoPairsShortcutToggle = '<another key>'
"
""""""""""""""""""""
" matchup
""""""""""""""""""""
"https://github.com/andymass/vim-matchup
let g:matchup_enabled = 1


""""""""""""""""""""
" NERD commenter
""""""""""""""""""""
" https://github.com/preservim/nerdcommenter/
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1

map	<leader><space>	<Plug>NERDCommenterToggle

" Usage
" [count]<leader>cc |NERDCommenterComment|
" Comment out the current line or text selected in visual mode.

" [count]<leader>cn |NERDCommenterNested|
" Same as cc but forces nesting.

" [count]<leader>c<space> |NERDCommenterToggle|
" Toggles the comment state of the selected line(s). If the topmost selected line is commented, all selected lines are uncommented and vice versa.

" [count]<leader>cm |NERDCommenterMinimal|
" Comments the given lines using only one set of multipart delimiters.

" [count]<leader>ci |NERDCommenterInvert|
" Toggles the comment state of the selected line(s) individually.

" [count]<leader>cs |NERDCommenterSexy|
" Comments out the selected lines with a pretty block formatted layout.

" [count]<leader>cy |NERDCommenterYank|
" Same as cc except that the commented line(s) are yanked first.

" <leader>c$ |NERDCommenterToEOL|
" Comments the current line from the cursor to the end of line.

" <leader>cA |NERDCommenterAppend|
" Adds comment delimiters to the end of line and goes into insert mode between them.

" |NERDCommenterInsert|
" Adds comment delimiters at the current cursor position and inserts between. Disabled by default.

" <leader>ca |NERDCommenterAltDelims|
" Switches to the alternative set of delimiters.

" [count]<leader>cl |NERDCommenterAlignLeft [count]<leader>cb |NERDCommenterAlignBoth
" Same as |NERDCommenterComment| except that the delimiters are aligned down the left side (<leader>cl) or both sides (<leader>cb).

" [count]<leader>cu |NERDCommenterUncomment|
" Uncomments the selected line(s).



""""""""""""""""""""
" ctrlP
""""""""""""""""""""
" https://github.com/ctrlpvim/ctrlp.vim
" http://ctrlpvim.github.io/ctrlp.vim/
" Change the default mapping and the default command to invoke CtrlP
let g:ctrlp_map = '<leader>p'
"let g:ctrlp_cmd = 'CtrlP'


" extension
let g:ctrlp_extensions = ['tag']
"let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir', 'rtscript',
"                    \ 'undo', 'line', 'changes', 'mixed', 'bookmarkdir']

" root path
"" 'c' - the directory of the current file.
"" 'a' - the directory of the current file, unless it is a subdirectory of the cwd
"" 'r' - the nearest ancestor of the current file that contains one of these directories or files: .git .hg .svn .bzr _darcs
"" 'w' - modifier to "r": start search from the cwd instead of the current file's directory
"" 0 or '' (empty string) - disable this feature.
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_root_markers = ['README.md', 'README.txt']
let g:ctrlp_custom_ignore = 'tmp$\|\.git$\|\.hg$\|\.svn$\|.rvm$|.bundle$\|vendor\|CMakeFiles'
let g:ctrlp_mruf_max = 500
"let g:ctrlp_clear_cache_on_exit=0

" Run :help ctrlp-mappings or submit ? in CtrlP for more mapping help.
" Once CtrlP is open:
" Press <F5> to purge the cache for the current directory to get new files, remove deleted files and apply new ignore options.
" Press <c-f> and <c-b> to cycle between modes.
" Press <c-d> to switch to filename only search instead of full path.
" Press <c-r> to switch to regexp mode.
" Use <c-j>, <c-k> or the arrow keys to navigate the result list.
" Use <c-t> or <c-v>, <c-x> to open the selected entry in a new tab or in a new split.
" Use <c-n>, <c-p> to select the next/previous string in the prompt's history.
" Use <c-y> to create a new file and its parent directories.
" Use <c-z> to mark/unmark multiple files and <c-o> to open them.
" Submit two or more dots .. to go up the directory tree by one or multiple levels.
" End the input string with a colon : followed by a command to execute it on the opening file(s): Use :25 to jump to line 25. Use :diffthis when opening multiple files to run :diffthis on the first 4 files.

""""""""""""""""""""
" ctrlP
""""""""""""""""""""
" TIPS:
" <c-f> <c-b> to change mode
" <c-b> to change between search by filename or not
" <c-r> to toggle 
nmap <F8> :TagbarToggle<CR>

"let g:ctrlp_max_height = 15
"let g:ctrlp_match_window_reversed = 0
" use regexp or not
"let g:ctrlp_regexp = 0
" the character at the start of search line
let g:ctrlp_line_prefix = 'â™ª '

" save cach or not
"let g:ctrlp_use_caching = 0
let g:ctrlp_mruf_max = 500


""""""""""""""""""""
" gutentags
""""""""""""""""""""
" https://github.com/ludovicchabant/vim-gutentags
" :call pathogen#helptags()
" :help gutentags
let gutentags_define_advanced_commands = 1  " debug mode
let g:gutentags_enabled = 0
nnoremap <leader>u :let g:gutentags_enabled=1<cr>:GutentagsUpdate<cr>

""""""""""""""""""""
" vim-skeleton
""""""""""""""""""""
" :help skeleton-commands
" :help skeleton-config
" Use the :SkelEdit[!] command for quick access to the currently loaded template file (or a specific template if specified).
" Use the :SkelInsert[!] command to load a specific template or force insertion of a template when automatic insertion wouldn't normally be triggered.
" @FILENAME@
" @BASENAME@
" @DATE@
" @YEAR@
" @CURSUR@
" @AUTHOR@

""""""""""""""""""""
" ack
""""""""""""""""""""
" install ack first
" Ubuntu: apt install ack-grep
" others: https://beyondgrep.com/install/ 
"nnoremap	<leader>a	:AckWindow<space><c-r>=expand("<cword>")<cr><space>
nnoremap	<leader>A	:Ack<space><c-r>=expand("<cword>")<cr><space>


""""""""""""""""""""
" vim-qf
""""""""""""""""""""
nmap	<leader>f	<Plug>(qf_qf_toggle_stay)
nmap	<leader>l	<Plug>(qf_loc_toggle_stay)
nmap	<leader>j	<Plug>(qf_qf_switch)
let g:qf_max_height = 8


""""""""""""""""""""
" syntastic
""""""""""""""""""""
" TIPS:
" to show urrent syntastic information :SyntasticInfo

" settings
"set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
" let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_aggregate_errors = 1
" let g:syntastic_enable_balloons = 1
" let g:syntastic_debug = 33

" :help syntastic

" checkers
" :help syntastic-checkers

"" python
"" pip install flake8
"" c++
" let g:syntastic_cpp_checkers=['gcc']
" let g:syntastic_cpp_checkers = ['cpplint']
" let g:syntastic_cpp_check_header = 0
" let g:syntastic_cpp_cpplint_exe = 'cpplint'
"let g:syntastic_cpp_cpplint_args = ' -std=c++11 -stdlib=libc++ -I/usr/include/c++'

"" c
" let g:syntastic_c_check_header = 0
" let g:syntastic_c_checkers = ['clang_tidy', 'gcc']
" let g:syntastic_c_clang_tidy_args= ' -std=c++11 -stdlib=libc++ -I/usr/include'
